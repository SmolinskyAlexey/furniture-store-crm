<?php

namespace Controllers;

use System\Core;

class Invoices extends _Base_ {

    public static $tableSettingsKey = 'invoices';
    public static $current_object   = 'invoice';
    
    protected const MODEL_CLASS = \Models\ProductReceipts::class;
    protected const CHILD_MODEL_CLASS = \Models\ProductReceiptItems::class;
    
    public static function getTableHead($only_values = false, $show_all = false, $filters = [])
    {
        $table_head = array();

        $table_head['id'] = array(
            'name' => '‚Ññ',
            'column_td' => 'id'
        );
        
        $table_head['supplier_id'] = array(
            'name' => 'ID –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞',
            'column_td' => 'supplier_id'
        );
        $table_head['warehouse_id'] = array(
            'name' => 'ID —Å–∫–ª–∞–¥–∞',
            'column_td' => 'warehouse_id'
        );
        $table_head['date_received'] = array(
            'name' => '–î–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è',
            'column_td' => 'date_received'
        );
        $table_head['total_sum'] = array(
            'name' => '–°—É–º–º–∞',
            'column_td' => 'total_sum'
        );
        $table_head['is_paid'] = array(
            'name' => '–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã',
            'column_td' => 'is_paid'
        );
        $table_head['comment'] = array(
            'name' => '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π',
            'column_td' => 'comment'
        );
        $table_head['manager_id'] = array(
            'name' => 'ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞',
            'column_td' => 'manager_id'
        );
        $table_head['created_at'] = array(
            'name' => '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è',
            'column_td' => 'created_at'
        );
        $table_head['actions'] = array(
            'name' => '–î–µ–π—Å—Ç–≤–∏—è',
            'column_td' => 'actions'
        );
        return self::getTableHeadHtml($table_head, $only_values, $show_all);
    }
    
    public function list(): void {
        $data = self::getDataForTemplate_List();
        $data['is_big_popup'] = true;
        $data['page-id'] = 'invoices-page';

        $data["filters"] = '
        <div class="search-bar">
            <input type="text" class="search-input-with-clear search-input" placeholder="–ü–æ–∏—Å–∫...">
            <button class="clear-btn" type="button">
                <svg width="20" height="20" viewBox="0 0 20 20" fill="currentColor">
                    <path d="M15 5L5 15M5 5l10 10" stroke="currentColor" stroke-width="2" stroke-linecap="round"></path>
                </svg>
            </button>
            <button class="search-btn" type="submit">üîç</button>
        </div>';

        $DataList = self::MODEL_CLASS::getList(0,0);
        foreach ($DataList as $key => $dataforHTML) {
            $data["tbody_html"].='<tr>';
            foreach ($data["table_head"] as $col_name => $head_data):
                if($col_name != 'actions'):
                    $colName = $col_name;
                    $colData = $dataforHTML[$colName];
                    if($colName == "created_at" || $colName == "date_received"){
                        if(!empty($colData)){
                            $colData = date("d.m.Y H:i:s", strtotime($colData));
                        }
                    }
                    else if($colName == "warehouse_id"){
                        $colData = \Models\Warehouses::getWarehouseById((int)$colData);
                    }
                    else if($colName == "is_paid"){
                        $colData = $colData ? '–û–ø–ª–∞—á–µ–Ω' : '–ù–µ –æ–ø–ª–∞—á–µ–Ω';
                    }
                    else if($colName == "supplier_id"){
                        $supplier = \Models\Contractors::getFullInfo((int)$colData);
                        $colData = isset($supplier["name"]) ? $supplier["name"] : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π";
                    }
                    $data["tbody_html"].="<td>{$colData}</td>";
                endif;
            endforeach;
            $data["tbody_html"].='                <td class="actions-cell">
                <div class="actions-wrapper">
                    <button class="btn btn-icon btn-secondary" onclick="window.showUniversalModal(\''.self::$tableSettingsKey.'\','.$dataforHTML["id"].')" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">‚úèÔ∏è</button> 
                </div>
            </td>';
            $data["tbody_html"].='</tr>';
        }
        
        Core::$template_obj->loadTemplate('_default_', $data);
        Core::$template_obj->showHtml();
    }
    
    public function ajax(): void {
        if (!isset($_POST['action'])) {
            \System\Core::exit('error _POST action');
        }
        
        if ($_POST['action'] == 'get_list') {
            $offset = (isset($_POST['offset']) ? $_POST['offset'] : 0);
            $limit  = (isset($_POST['limit'])  ? $_POST['limit']  : 5);
            $resp   = self::MODEL_CLASS::getList($offset, $limit, $_POST);
            
            $list = array();
            foreach ($resp as $key => $value) {
                foreach ($value as $colName => $colData) {
                    if($colName == "created_at" || $colName == "date_received"){
                        if(!empty($colData)){
                            $colData = date("d.m.Y H:i:s", strtotime($colData));
                        }
                    }
                    else if($colName == "warehouse_id"){
                        $colData = \Models\Warehouses::getWarehouseById((int)$colData);
                    }
                    else if($colName == "is_paid"){
                        $colData = $colData ? '–û–ø–ª–∞—á–µ–Ω' : '–ù–µ –æ–ø–ª–∞—á–µ–Ω';
                    }
                    else if($colName == "supplier_id"){
                        $supplier = \Models\Contractors::getFullInfo((int)$colData);
                        $colData = isset($supplier["name"]) ? $supplier["name"] : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π";
                    }
                    $list[$key][$colName] = $colData;
                }
            }
            
            \System\Response::okJSON([
                'list'      => $list,
                'total_num' => self::MODEL_CLASS::getNumRecords($_POST),
            ]);
        }
        else if ($_POST['action'] == 'add') {
            global $AUTH_USER;
            global $SQL;
            $supplierId = $_POST['supplier_id'] ?? '';
            $warehouseId = $_POST['warehouse_id'] ?? '';//\System\Auth::$auth_user['warehouse_id'];
            $manager_id  = $_POST['manager_id'] ?? '';//\System\Auth::$auth_user['id'];
            if(empty($supplierId) || !isset($warehouseId)){
                \System\Response::showJSONError('–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –æ–¥–Ω–æ –∏–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π (ID –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞, ID —Å–∫–ª–∞–¥–∞)');
            }
            
            $insert = [
                'supplier_id'    => $supplierId,
                'warehouse_id'   => $warehouseId,
                'date_received'  => $_POST['date_received'] ?? date("Y-m-d H:i:s"),
                'total_sum'      => $_POST['total_sum'] ?? 0,
                'is_paid'        => $_POST['is_paid'] ?? 0,
                'comment'        => $_POST['comment'] ?? '',
                'manager_id'     => $manager_id ?? '',
                'created_at'     => date("Y-m-d H:i:s"),
            ];
            
            $id = self::MODEL_CLASS::insert($insert);
            $itemIds = array();
            if(isset($_POST["products"]) && !empty($_POST['products']) && is_array($_POST['products'])){
                $receiptItems = $_POST['products']; 
                foreach ($receiptItems as $key => $item) {
                    $itemInsert = array(
                        'receipt_id'    =>  $id,
                        'product_id'    =>  (int)$item["product_id"],
                        'quantity'  =>  (int)$item["quantity"],
                        'price' =>  (float)$item["price"],
                        'total' =>  (int)$item["quantity"]*(float)$item["price"],   
                    );
                    $itemId = self::CHILD_MODEL_CLASS::insert($itemInsert);
                    $itemIds[] = $itemId;
                    //–î–æ–±–∞–≤–∏–º —Ç–æ–≤–∞—Ä—ã –≤ —Ç–∞–±–ª–∏—Ü—É —Ä–µ–≥–∏—Å—Ç—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ 
                    \Helpers\StockRegister::recordMovement('receipt', $id, $warehouseId, (int)$item["product_id"], +abs((int)$item["quantity"]) );
                }
            }

            \System\Response::okJSON(['id'=>$id, 'item_ids'=>$itemIds]);
        }
        else if ($_POST['action'] == 'edit') {
            global $AUTH_USER;
            
            $id = (int) $_POST['item_id'];
            if ($id > 0) {
                $check = self::MODEL_CLASS::checkItemByID($id);
                if (empty($check)) {
                    exit('error');
                }
                
                $warehouseId = $_POST['warehouse_id'] ?? '';//\System\Auth::$auth_user['warehouse_id'];
                $manager_id  = $_POST['manager_id'] ?? '';//\System\Auth::$auth_user['id'];

                $update = [
                    'supplier_id'    => $_POST['supplier_id'] ?? '',
                    'warehouse_id'   => $warehouseId,
                    'date_received'  => $_POST['date_received'] ?? date("Y-m-d H:i:s"),
                    'total_sum'      => $_POST['total_sum'] ?? 0,
                    'is_paid'        => $_POST['is_paid'] ?? 0,
                    'comment'        => $_POST['comment'] ?? '',
                    'manager_id'     => $manager_id,
                    'created_at'     => date("Y-m-d H:i:s"),
                ];
                
                self::MODEL_CLASS::update($id, $update);
                
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
                $itemIds = [];
                if (isset($_POST['products']) && is_array($_POST['products']) && !empty($_POST['products'])) {
                    $productsList = $_POST['products'];
                    
                    foreach ($productsList as $key => $item) {
                        $product_id = (int)($item['product_id'] ?? 0);
                        $quantity = (int)($item['quantity'] ?? 0);
                        $price = (float)($item['price'] ?? 0);
                        $item_id = (int)($item['receipt_item_id'] ?? 0); // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ ID –ø–æ–∑–∏—Ü–∏–∏ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –∫–∞–∫ receipt_item_id
                         
                        //–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ü–†–û–í–ï–†–Ø–ï–ú $item_id (receipt_item_id POST, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç - —ç—Ç–æ –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä –≤ –Ω–∞–∫–ª–∞–¥–Ω–æ–π)
                        if (empty($product_id) || empty($quantity) || empty($price) /*|| empty($item_id)*/) {
                            continue;
                        }
                        
                        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏

                        $existingItem = 0; 
                        if(!empty($item_id)){
                            $existingItem = self::CHILD_MODEL_CLASS::getFullInfo($item_id);
                        }
                        if (!empty($existingItem)) {
                            // –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–≤–Ω–æ 0, —É–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å
                            if ($quantity == 0) {
                                self::CHILD_MODEL_CLASS::delete(['id' => $item_id]);
                            } else {
                                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
                                self::CHILD_MODEL_CLASS::update($item_id, [
                                    'product_id' => $product_id,
                                    'quantity'   => $quantity,
                                    'price'      => $price,
                                    'total'      => $quantity * $price,
                                ]);
                                $itemIds[] = $item_id;
                            }
                        } else {
                            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                            $itemInsert = [
                                'receipt_id'  => $id,
                                'product_id'  => $product_id,
                                'quantity'    => $quantity,
                                'price'       => $price,
                                'total'       => $quantity * $price,
                            ];
                            $itemId = self::CHILD_MODEL_CLASS::insert($itemInsert);
                            $itemIds[] = $itemId;
                        }
                    }
                }
                \System\Response::okJSON();
            }
            \System\Response::showJSONError('–ù–µ –ø–µ—Ä–µ–¥–∞–Ω id');
        }
        else if ($_POST['action'] == 'get') {
            
            // –æ—Ç–≤–µ—Ç –≤ json
            $id = (int)($_POST['id'] ?? 0);
            if ($id) {
                
                $data = self::getInvoiceInfo($id);
                
                \System\Response::okJSON([
                    'data' => (object)$data,
                ]);
            }
            \System\Response::showJSONError('–ù–µ –ø–µ—Ä–µ–¥–∞–Ω id –Ω–∞–∫–ª–∞–¥–Ω–æ–π');
            
        }else if ($_POST['action'] == 'load_card') {
            
            if ( !isset($_POST['id']) ) {
                \System\Core::exit('not isset id!');
            }
            
            
            $id   = (int) $_POST['id'];
            $data = self::getInvoiceInfo($id);
            
            
            if ( !empty($id) && empty($data) ) {
               \System\Core::exit('empty data!');
            }
            
            
            echo \System\Core::$template_obj->loadTemplatePart(static::$tableSettingsKey.'_card', $data);
            \System\Core::exit();
            
        }
        self::ajaxActionsCommon();
    }

    public static function getInvoiceInfo(int $invoiceId): array {
        
        if ($invoiceId <= 0) {
            return [];
        }
        
        $data = self::MODEL_CLASS::getFullInfo($invoiceId);


        $data['products']   = self::CHILD_MODEL_CLASS::getReceiptItems($data["id"]);
        
        return $data;
        
    }
}